import { initialState } from './selectors'
import {
  MINING_THREAD_COUNT_GET_REQUEST,
  MINING_THREAD_COUNT_GET_SUCCESS,
  MINING_THREAD_COUNT_GET_FAILURE,

  MINING_THREAD_COUNT_SET_REQUEST,
  MINING_THREAD_COUNT_SET_SUCCESS,
  MINING_THREAD_COUNT_SET_FAILURE,

  MINING_THREAD_AUTO_GET_REQUEST,
  MINING_THREAD_AUTO_GET_SUCCESS,
  MINING_THREAD_AUTO_GET_FAILURE,

  MINING_THREAD_AUTO_SET_REQUEST,
  MINING_THREAD_AUTO_SET_SUCCESS,
  MINING_THREAD_AUTO_SET_FAILURE,

  MINING_HASH_TOTAL_REQUEST,
  MINING_HASH_TOTAL_SUCCESS,
  MINING_HASH_TOTAL_FAILURE,
  MINING_HASH_AVERAGE_REQUEST,
  MINING_HASH_AVERAGE_SUCCESS,
  MINING_HASH_AVERAGE_FAILURE,
  MINING_HASH_ACCEPTED_REQUEST,
  MINING_HASH_ACCEPTED_SUCCESS,
  MINING_HASH_ACCEPTED_FAILURE,

  MINING_THROTTLE_GET_REQUEST,
  MINING_THROTTLE_GET_SUCCESS,
  MINING_THROTTLE_GET_FAILURE,
  MINING_THROTTLE_SET_REQUEST,
  MINING_THROTTLE_SET_SUCCESS,
  MINING_THROTTLE_SET_FAILURE,

  MINING_INITIALIZE_REQUEST,
  MINING_INITIALIZE_SUCCESS,
  MINING_INITIALIZE_FAILURE,
  MINING_START_REQUEST,
  MINING_START_SUCCESS,
  MINING_START_FAILURE,
  MINING_STOP_REQUEST,
  MINING_STOP_SUCCESS,
  MINING_STOP_FAILURE,
  MINING_TOKEN_REQUEST,
  MINING_TOKEN_SUCCESS,
  MINING_TOKEN_FAILURE,
  MINING_RUNNING_REQUEST,
  MINING_RUNNING_SUCCESS,
  MINING_RUNNING_FAILURE,
  MINING_WASP_SUPPORTREQUEST,
  MINING_WASP_SUPPORT_SUCCESS,
  MINING_WASP_SUPPORT_FAILURE,
  MINING_EVENT_LISTENER_SET_REQUEST,
  MINING_EVENT_LISTENER_SET_SUCCESS,
  MINING_EVENT_LISTENER_SET_FAILURE,
  
} from './actions'

export default (state = initialState, {type, payload}) => {
  switch (type) {

    case MINING_RUNNING_SUCCESS:
      return {
        ...state,
        miningStatus: payload
      }
      
    case MINING_THREAD_COUNT_GET_SUCCESS:
      return {
        ...state,
        threadCount: payload
      }
    case MINING_THREAD_AUTO_GET_SUCCESS:
      return {
        ...state,
        threadAuto: payload
      }

    case MINING_HASH_TOTAL_SUCCESS:
      return {
        ...state,
        hashTotal: payload
      }
    case MINING_HASH_AVERAGE_SUCCESS:
      return {
        ...state,
        hashAverage: Math.ceil(payload)
      }
    case MINING_HASH_ACCEPTED_SUCCESS:
      return {
        ...state,
        hashAccepted: payload
      }
    default:
      return state
  }
}
